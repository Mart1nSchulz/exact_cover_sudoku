#include <iostream>
#include "dlinks_matrix.h"


//convert int array representing puzzle into constraint matrix for algorithm x
//inputs: int array and dimension of puzzle. (dim==9 for standard 9x9 puzzle)
void build_matrix(Matrix* matrix, int* sudoku_list){ //only perfect square puzzles are supported
    int row = 0;
    int one_c[] = { 0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,2,3,3,3,3,3,3,3,3,3,4,4,4,4,4,4,4,4,4,5,5,5,5,5,5,5,5,5,6,6,6,6,6,6,6,6,6,7,7,7,7,7,7,7,7,7,8,8,8,8,8,8,8,8,8,9,9,9,9,9,9,9,9,9,10,10,10,10,10,10,10,10,10,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,12,12,13,13,13,13,13,13,13,13,13,14,14,14,14,14,14,14,14,14,15,15,15,15,15,15,15,15,15,16,16,16,16,16,16,16,16,16,17,17,17,17,17,17,17,17,17,18,18,18,18,18,18,18,18,18,19,19,19,19,19,19,19,19,19,20,20,20,20,20,20,20,20,20,21,21,21,21,21,21,21,21,21,22,22,22,22,22,22,22,22,22,23,23,23,23,23,23,23,23,23,24,24,24,24,24,24,24,24,24,25,25,25,25,25,25,25,25,25,26,26,26,26,26,26,26,26,26,27,27,27,27,27,27,27,27,27,28,28,28,28,28,28,28,28,28,29,29,29,29,29,29,29,29,29,30,30,30,30,30,30,30,30,30,31,31,31,31,31,31,31,31,31,32,32,32,32,32,32,32,32,32,33,33,33,33,33,33,33,33,33,34,34,34,34,34,34,34,34,34,35,35,35,35,35,35,35,35,35,36,36,36,36,36,36,36,36,36,37,37,37,37,37,37,37,37,37,38,38,38,38,38,38,38,38,38,39,39,39,39,39,39,39,39,39,40,40,40,40,40,40,40,40,40,41,41,41,41,41,41,41,41,41,42,42,42,42,42,42,42,42,42,43,43,43,43,43,43,43,43,43,44,44,44,44,44,44,44,44,44,45,45,45,45,45,45,45,45,45,46,46,46,46,46,46,46,46,46,47,47,47,47,47,47,47,47,47,48,48,48,48,48,48,48,48,48,49,49,49,49,49,49,49,49,49,50,50,50,50,50,50,50,50,50,51,51,51,51,51,51,51,51,51,52,52,52,52,52,52,52,52,52,53,53,53,53,53,53,53,53,53,54,54,54,54,54,54,54,54,54,55,55,55,55,55,55,55,55,55,56,56,56,56,56,56,56,56,56,57,57,57,57,57,57,57,57,57,58,58,58,58,58,58,58,58,58,59,59,59,59,59,59,59,59,59,60,60,60,60,60,60,60,60,60,61,61,61,61,61,61,61,61,61,62,62,62,62,62,62,62,62,62,63,63,63,63,63,63,63,63,63,64,64,64,64,64,64,64,64,64,65,65,65,65,65,65,65,65,65,66,66,66,66,66,66,66,66,66,67,67,67,67,67,67,67,67,67,68,68,68,68,68,68,68,68,68,69,69,69,69,69,69,69,69,69,70,70,70,70,70,70,70,70,70,71,71,71,71,71,71,71,71,71,72,72,72,72,72,72,72,72,72,73,73,73,73,73,73,73,73,73,74,74,74,74,74,74,74,74,74,75,75,75,75,75,75,75,75,75,76,76,76,76,76,76,76,76,76,77,77,77,77,77,77,77,77,77,78,78,78,78,78,78,78,78,78,79,79,79,79,79,79,79,79,79,80,80,80,80,80,80,80,80,80,};
    int row_c[] = { 81,82,83,84,85,86,87,88,89,81,82,83,84,85,86,87,88,89,81,82,83,84,85,86,87,88,89,81,82,83,84,85,86,87,88,89,81,82,83,84,85,86,87,88,89,81,82,83,84,85,86,87,88,89,81,82,83,84,85,86,87,88,89,81,82,83,84,85,86,87,88,89,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,90,91,92,93,94,95,96,97,98,90,91,92,93,94,95,96,97,98,90,91,92,93,94,95,96,97,98,90,91,92,93,94,95,96,97,98,90,91,92,93,94,95,96,97,98,90,91,92,93,94,95,96,97,98,90,91,92,93,94,95,96,97,98,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,99,100,101,102,103,104,105,106,107,99,100,101,102,103,104,105,106,107,99,100,101,102,103,104,105,106,107,99,100,101,102,103,104,105,106,107,99,100,101,102,103,104,105,106,107,99,100,101,102,103,104,105,106,107,99,100,101,102,103,104,105,106,107,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,108,109,110,111,112,113,114,115,116,108,109,110,111,112,113,114,115,116,108,109,110,111,112,113,114,115,116,108,109,110,111,112,113,114,115,116,108,109,110,111,112,113,114,115,116,108,109,110,111,112,113,114,115,116,108,109,110,111,112,113,114,115,116,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,117,118,119,120,121,122,123,124,125,117,118,119,120,121,122,123,124,125,117,118,119,120,121,122,123,124,125,117,118,119,120,121,122,123,124,125,117,118,119,120,121,122,123,124,125,117,118,119,120,121,122,123,124,125,117,118,119,120,121,122,123,124,125,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,126,127,128,129,130,131,132,133,134,126,127,128,129,130,131,132,133,134,126,127,128,129,130,131,132,133,134,126,127,128,129,130,131,132,133,134,126,127,128,129,130,131,132,133,134,126,127,128,129,130,131,132,133,134,126,127,128,129,130,131,132,133,134,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,135,136,137,138,139,140,141,142,143,135,136,137,138,139,140,141,142,143,135,136,137,138,139,140,141,142,143,135,136,137,138,139,140,141,142,143,135,136,137,138,139,140,141,142,143,135,136,137,138,139,140,141,142,143,135,136,137,138,139,140,141,142,143,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,144,145,146,147,148,149,150,151,152,144,145,146,147,148,149,150,151,152,144,145,146,147,148,149,150,151,152,144,145,146,147,148,149,150,151,152,144,145,146,147,148,149,150,151,152,144,145,146,147,148,149,150,151,152,144,145,146,147,148,149,150,151,152,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,153,154,155,156,157,158,159,160,161,153,154,155,156,157,158,159,160,161,153,154,155,156,157,158,159,160,161,153,154,155,156,157,158,159,160,161,153,154,155,156,157,158,159,160,161,153,154,155,156,157,158,159,160,161,153,154,155,156,157,158,159,160,161,153,154,155,156,157,158,159,160,161};
    int col_c[] = { 162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242};
    int box_c[] = { 243,244,245,246,247,248,249,250,251,243,244,245,246,247,248,249,250,251,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,252,253,254,255,256,257,258,259,260,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,261,262,263,264,265,266,267,268,269,261,262,263,264,265,266,267,268,269,243,244,245,246,247,248,249,250,251,243,244,245,246,247,248,249,250,251,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,252,253,254,255,256,257,258,259,260,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,261,262,263,264,265,266,267,268,269,261,262,263,264,265,266,267,268,269,243,244,245,246,247,248,249,250,251,243,244,245,246,247,248,249,250,251,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,252,253,254,255,256,257,258,259,260,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,261,262,263,264,265,266,267,268,269,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,270,271,272,273,274,275,276,277,278,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,279,280,281,282,283,284,285,286,287,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,288,289,290,291,292,293,294,295,296,288,289,290,291,292,293,294,295,296,270,271,272,273,274,275,276,277,278,270,271,272,273,274,275,276,277,278,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,279,280,281,282,283,284,285,286,287,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,288,289,290,291,292,293,294,295,296,288,289,290,291,292,293,294,295,296,270,271,272,273,274,275,276,277,278,270,271,272,273,274,275,276,277,278,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,279,280,281,282,283,284,285,286,287,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,288,289,290,291,292,293,294,295,296,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,297,298,299,300,301,302,303,304,305,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,306,307,308,309,310,311,312,313,314,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,315,316,317,318,319,320,321,322,323,315,316,317,318,319,320,321,322,323,297,298,299,300,301,302,303,304,305,297,298,299,300,301,302,303,304,305,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,306,307,308,309,310,311,312,313,314,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,315,316,317,318,319,320,321,322,323,315,316,317,318,319,320,321,322,323,297,298,299,300,301,302,303,304,305,297,298,299,300,301,302,303,304,305,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,306,307,308,309,310,311,312,313,314,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,315,316,317,318,319,320,321,322,323,315,316,317,318,319,320,321,322,323};
    Node* r1, *r2, *r3, *r4;
    matrix->init_matrix();
    //iterate through puzzle list
    for(int i=0; i<81; i++){
        //if no value assigned to cell, populate all rows representing all possible candidate values for cell
        if(sudoku_list[i] == 0){
            for(int j=0; j<9; j++){
                row = i*9+j;
                r1 = matrix->insert(row, one_c[row]);
                r2 = matrix->insert(row, row_c[row]);
                r3 = matrix->insert(row, col_c[row]);
                r4 = matrix->insert(row, box_c[row]);
                r1->right = r2; r2->right = r3; r3->right = r4; r4->right = r1;
                r4->left = r3; r3->left = r2; r2->left = r1; r1->left = r4;
            }
        }
        //otherwise only populate the row representing the known assigned value
        else{
            row = i*9+sudoku_list[i]-1;
            r1 = matrix->insert(row, one_c[row]);
            r2 = matrix->insert(row, row_c[row]);
            r3 = matrix->insert(row, col_c[row]);
            r4 = matrix->insert(row, box_c[row]);
            r1->right = r2; r2->right = r3; r3->right = r4; r4->right = r1;
            r4->left = r3; r3->left = r2; r2->left = r1; r1->left = r4;
        }
    }
    matrix->insert_finalize();
}

//decodes the rows of constraint matrix stored in solution_stack and
//populates solved_puzzle int array with a representation of the completed puzzle
void decode_solution(Matrix* matrix, int* solved_puzzle){
    int index, value;
    for(int i=0; i<81; i++){
        index = matrix->solution_stack[i] / 9;
        value = (matrix->solution_stack[i] % 9) + 1;
        solved_puzzle[index] = value;
    }
}

//solve a soduku puzzle represented by an int array
//returns true if solution is found, false otherwise
//inputs: int array puzzle - original puzzle
//        int dim - dimension of puzzle (dim==9 for standard 9x9 sudoku)
//        int array solution - contains completed puzzle if solution is found
bool solve_puzzle(Matrix* puzzle_matrix, int* puzzle, int* solution){
    build_matrix(puzzle_matrix, puzzle);
    bool found = puzzle_matrix->alg_x_search();
    if(found) { decode_solution(puzzle_matrix, solution); }
    return found;
}


int main(){
    Matrix solver;
    char buf[1024];
    int solution[81];
    int puzzle[81];

    std::FILE* puzzles = std::fopen("puzzles.txt", "r");
    while(std::fgets(buf, 1024, puzzles) != 0){
        for(int i=0; i<81; i++){
            puzzle[i] = buf[i] - '0';
        }
        solve_puzzle(&solver, puzzle, solution);
        //print solutions
        // for(int i=0; i<81; i++){
        //     std::cout << solution[i];
        // }
        // std::cout << '\n';
    }
    return 0;
}